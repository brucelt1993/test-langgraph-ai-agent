name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

jobs:
  # 后端单元测试
  backend-unit-tests:
    name: Backend Unit Tests
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        python-version: ["3.11", "3.12"]
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install uv
        uses: astral-sh/setup-uv@v3
        with:
          version: "latest"

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install dependencies
        working-directory: ./backend
        run: |
          uv sync
          uv pip install pytest-xdist

      - name: Run code quality checks
        working-directory: ./backend
        run: |
          uv run black --check .
          uv run isort --check-only .
          uv run flake8 .
          uv run mypy app/

      - name: Run unit tests
        working-directory: ./backend
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_db
          SECRET_KEY: test_secret_key_for_ci
          ENVIRONMENT: test
        run: |
          uv run pytest tests/ -v --cov=app --cov-report=xml --cov-report=term-missing -n auto --ignore=tests/integration/

      - name: Upload unit test coverage
        uses: codecov/codecov-action@v4
        with:
          file: ./backend/coverage.xml
          flags: backend-unit
          name: backend-unit-coverage

  # 前端单元测试
  frontend-unit-tests:
    name: Frontend Unit Tests
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: ["18", "20", "22"]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'
          cache-dependency-path: './frontend/package-lock.json'

      - name: Install dependencies
        working-directory: ./frontend
        run: npm ci

      - name: Run type check
        working-directory: ./frontend
        run: npm run type-check

      - name: Run linting
        working-directory: ./frontend
        run: npm run lint

      - name: Run unit tests
        working-directory: ./frontend
        run: npm run test:coverage

      - name: Upload unit test coverage
        uses: codecov/codecov-action@v4
        with:
          file: ./frontend/coverage/coverage-final.json
          flags: frontend-unit
          name: frontend-unit-coverage

  # 集成测试
  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [backend-unit-tests, frontend-unit-tests]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install uv
        uses: astral-sh/setup-uv@v3

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Start test environment
        working-directory: ./tests
        run: |
          docker-compose -f docker/docker-compose.test.yml up -d test-postgres test-redis
          sleep 10

      - name: Install backend dependencies
        working-directory: ./backend
        run: uv sync

      - name: Run integration tests
        working-directory: ./backend
        env:
          DATABASE_URL: postgresql://test_user:test_password@localhost:5433/test_db
          REDIS_URL: redis://localhost:6380/0
          SECRET_KEY: test_secret_key_for_integration
          ENVIRONMENT: integration_test
        run: |
          uv run pytest tests/integration/ -v --cov=app --cov-report=xml --cov-report=term-missing

      - name: Upload integration test coverage
        uses: codecov/codecov-action@v4
        with:
          file: ./backend/coverage.xml
          flags: integration
          name: integration-coverage

      - name: Cleanup test environment
        if: always()
        working-directory: ./tests
        run: docker-compose -f docker/docker-compose.test.yml down

  # E2E测试
  e2e-tests:
    name: E2E Tests
    runs-on: ubuntu-latest
    needs: [integration-tests]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: 'npm'
          cache-dependency-path: './frontend/package-lock.json'

      - name: Install frontend dependencies
        working-directory: ./frontend
        run: npm ci

      - name: Build frontend
        working-directory: ./frontend
        run: npm run build

      - name: Install E2E dependencies
        working-directory: ./tests/e2e
        run: npm ci

      - name: Install Playwright browsers
        working-directory: ./tests/e2e
        run: npx playwright install --with-deps

      - name: Start test environment
        working-directory: ./tests
        run: |
          docker-compose -f docker/docker-compose.test.yml up -d
          sleep 30

      - name: Wait for services
        run: |
          timeout 60 bash -c 'until curl -f http://localhost:3001; do sleep 2; done'
          timeout 60 bash -c 'until curl -f http://localhost:8001/health; do sleep 2; done'

      - name: Run E2E tests
        working-directory: ./tests/e2e
        env:
          E2E_BASE_URL: http://localhost:3001
          API_BASE_URL: http://localhost:8001
        run: npx playwright test

      - name: Upload E2E test report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: e2e-report
          path: |
            ./tests/e2e/playwright-report/
            ./tests/e2e/test-results/
          retention-days: 7

      - name: Upload E2E screenshots
        uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: e2e-screenshots
          path: ./tests/e2e/test-results/
          retention-days: 3

      - name: Cleanup test environment
        if: always()
        working-directory: ./tests
        run: docker-compose -f docker/docker-compose.test.yml down

  # 构建测试
  build-test:
    name: Build Tests
    runs-on: ubuntu-latest
    needs: [backend-unit-tests, frontend-unit-tests]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: 'npm'
          cache-dependency-path: './frontend/package-lock.json'

      - name: Install frontend dependencies
        working-directory: ./frontend
        run: npm ci

      - name: Build frontend
        working-directory: ./frontend
        run: npm run build

      - name: Install uv
        uses: astral-sh/setup-uv@v3

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Test backend startup
        working-directory: ./backend
        env:
          DATABASE_URL: sqlite:///./test.db
          SECRET_KEY: test_secret_key
        run: |
          uv sync
          timeout 30s uv run python main.py || code=$?
          if [[ $code -ne 124 && $code -ne 0 ]]; then
            exit $code
          fi

      - name: Test Docker builds
        run: |
          docker build -t ai-agent-backend ./backend
          docker build -t ai-agent-frontend ./frontend

  # 安全检查
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

      - name: Run npm audit (frontend)
        working-directory: ./frontend
        run: |
          npm ci
          npm audit --audit-level moderate

      - name: Run safety check (backend)
        working-directory: ./backend
        run: |
          pip install safety
          safety check

  # 性能测试
  performance-tests:
    name: Performance Tests
    runs-on: ubuntu-latest
    needs: [build-test]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: Install dependencies
        working-directory: ./tests/e2e
        run: npm ci

      - name: Start test environment
        working-directory: ./tests
        run: |
          docker-compose -f docker/docker-compose.test.yml up -d
          sleep 30

      - name: Run Lighthouse CI
        working-directory: ./tests/e2e
        run: |
          npm install -g @lhci/cli
          lhci autorun --upload.target=temporary-public-storage

      - name: Run load tests
        run: |
          npm install -g artillery
          artillery run ./tests/performance/load-test.yml

      - name: Cleanup
        if: always()
        working-directory: ./tests
        run: docker-compose -f docker/docker-compose.test.yml down

  # 部署到测试环境 (仅在develop分支)
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [integration-tests, e2e-tests, build-test, security-scan]
    if: github.ref == 'refs/heads/develop' && github.event_name == 'push'
    
    environment: staging
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to staging
        run: |
          echo "部署到测试环境..."
          # 实际部署脚本

  # 部署到生产环境 (仅在main分支)
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [integration-tests, e2e-tests, build-test, security-scan, performance-tests]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    environment: production
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to production
        run: |
          echo "部署到生产环境..."
          # 实际部署脚本