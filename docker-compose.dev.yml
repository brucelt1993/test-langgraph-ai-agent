# AI Agent 开发环境Docker Compose配置
version: '3.8'

services:
  # PostgreSQL数据库
  postgres:
    image: postgres:15-alpine
    container_name: ai-agent-postgres-dev
    environment:
      POSTGRES_DB: ai_agent_dev
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    volumes:
      - postgres_dev_data:/var/lib/postgresql/data
      - ./backend/migrations:/docker-entrypoint-initdb.d/
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d ai_agent_dev"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    networks:
      - dev-network

  # Redis缓存
  redis:
    image: redis:7-alpine
    container_name: ai-agent-redis-dev
    command: redis-server --requirepass devpassword --maxmemory 128mb
    ports:
      - "6379:6379"
    volumes:
      - redis_dev_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "devpassword", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3
    restart: unless-stopped
    networks:
      - dev-network

  # 后端API服务（开发模式）
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile.dev
    container_name: ai-agent-backend-dev
    environment:
      DATABASE_URL: postgresql://postgres:postgres@postgres:5432/ai_agent_dev
      REDIS_URL: redis://:devpassword@redis:6379/0
      SECRET_KEY: dev_secret_key_change_in_production
      ENVIRONMENT: development
      LOG_LEVEL: DEBUG
      OPENAI_API_KEY: ${OPENAI_API_KEY}
      OPENAI_BASE_URL: ${OPENAI_BASE_URL:-https://api.openai.com/v1}
      WEATHER_API_KEY: ${WEATHER_API_KEY}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./backend:/app
      - backend_dev_logs:/app/logs
    ports:
      - "8000:8000"
    restart: unless-stopped
    networks:
      - dev-network
    command: ["uv", "run", "uvicorn", "main:app", "--host", "0.0.0.0", "--port", "8000", "--reload"]

  # 前端Web服务（开发模式）
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.dev
    container_name: ai-agent-frontend-dev
    environment:
      VITE_API_BASE_URL: http://localhost:8000/api
      VITE_WS_BASE_URL: ws://localhost:8000/api/ws
      NODE_ENV: development
    volumes:
      - ./frontend:/app
      - /app/node_modules
    ports:
      - "3000:3000"
    restart: unless-stopped
    networks:
      - dev-network
    command: ["npm", "run", "dev", "--", "--host", "0.0.0.0"]

  # 数据库管理工具
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: ai-agent-pgadmin
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@example.com
      PGADMIN_DEFAULT_PASSWORD: admin
      PGADMIN_CONFIG_SERVER_MODE: 'False'
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    ports:
      - "5050:80"
    depends_on:
      - postgres
    networks:
      - dev-network
    profiles:
      - tools

  # Redis管理工具
  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: ai-agent-redis-commander
    environment:
      REDIS_HOSTS: "local:redis:6379:0:devpassword"
    ports:
      - "8081:8081"
    depends_on:
      - redis
    networks:
      - dev-network
    profiles:
      - tools

  # 邮件测试工具
  mailhog:
    image: mailhog/mailhog:latest
    container_name: ai-agent-mailhog
    ports:
      - "8025:8025"  # Web UI
      - "1025:1025"  # SMTP
    networks:
      - dev-network
    profiles:
      - tools

# 数据卷
volumes:
  postgres_dev_data:
    driver: local
  redis_dev_data:
    driver: local
  backend_dev_logs:
    driver: local
  pgadmin_data:
    driver: local

# 网络
networks:
  dev-network:
    driver: bridge